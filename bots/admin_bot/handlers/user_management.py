from aiogram import Router
from aiogram.types import Message
from db.crud import get_user_by_telegram_id_or_username, set_user_block_status

router = Router()

@router.message(lambda msg: msg.text.startswith("/userinfo"))
async def user_info_handler(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /userinfo <id –∏–ª–∏ username>")
        return

    query = parts[1].lstrip("@")  # remove @ if provided

    user = await get_user_by_telegram_id_or_username(query)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        f"üë§ –§–ò–û: {user.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
        f"üÜî Telegram ID: <code>{user.id}</code>\n"
        f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.is_blocked else '–ù–µ—Ç'}"
    )
    await message.answer(text)


@router.message(lambda msg: msg.text.startswith("/block"))
async def block_user(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /block <id –∏–ª–∏ username>")
        return

    query = parts[1].lstrip("@")
    success = await set_user_block_status(query, True)
    if success:
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(lambda msg: msg.text.startswith("/unblock"))
async def unblock_user(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unblock <id –∏–ª–∏ username>")
        return

    query = parts[1].lstrip("@")
    success = await set_user_block_status(query, False)
    if success:
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")