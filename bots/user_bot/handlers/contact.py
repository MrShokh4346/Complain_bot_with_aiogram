from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bots.user_bot.states import ContactCallState, ChatSupportState
from core.config import ADMIN_GROUP_ID

router = Router()

@router.message(F.text.lower().contains("—Å–≤—è–∑–∞—Ç—å—Å—è"))
async def contact_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìû –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ", callback_data="contact_call")
    builder.button(text="üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ —á–∞—Ç-–±–æ—Ç–µ", callback_data="contact_chat")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=builder.as_markup())

# ----- CALL REQUEST -----
@router.callback_query(F.data == "contact_call")
async def ask_confirm_number(callback: CallbackQuery, state: FSMContext):
    # Assume phone is stored or hardcoded (later we fetch from DB)
    phone = "+79177220895"
    await state.set_state(ContactCallState.confirm)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞", callback_data="call_confirm")
    builder.button(text="‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="call_change")
    await callback.message.answer(f"–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}?\n–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç, –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å:", reply_markup=builder.as_markup())

@router.callback_query(F.data == "call_confirm")
async def confirm_call(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user
    # Notify admin group
    await callback.bot.send_message(ADMIN_GROUP_ID, f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å:\n@{user.username or '‚Äî'} (id: {user.id})")
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.callback_query(F.data == "call_change")
async def wait_new_phone(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ContactCallState.wait_phone)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(ContactCallState.wait_phone)
async def get_new_phone(message: Message, state: FSMContext):
    user = message.from_user
    phone = message.text
    await message.bot.send_message(ADMIN_GROUP_ID, f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä: {phone}\n@{user.username or '‚Äî'} (id: {user.id})")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

# ----- CHAT WITH DISPATCHER -----
@router.callback_query(F.data == "contact_chat")
async def contact_chat_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChatSupportState.chat)
    builder = InlineKeyboardBuilder()
    builder.button(text="üõë –î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è", callback_data="end_chat")
    await callback.message.answer(
        '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì", –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ.',
        reply_markup=builder.as_markup()
    )

@router.message(ChatSupportState.chat)
async def relay_to_admin(message: Message):
    user = message.from_user
    await message.bot.send_message(ADMIN_GROUP_ID, f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '‚Äî'} (id: {user.id}):\n{message.text}")

@router.callback_query(F.data == "end_chat")
async def end_chat(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.clear()
