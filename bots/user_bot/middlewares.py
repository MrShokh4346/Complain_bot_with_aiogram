from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject
from db.crud import get_user_by_telegram_id_or_username
from aiogram.fsm.context import FSMContext
from bots.user_bot.states import RegistrationState

class BlockCheckMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        if isinstance(event, Message):
            user_id = event.from_user.id
            user = await get_user_by_telegram_id_or_username(str(user_id))

            # If user is NOT found ‚Äî redirect to registration
            if not user:
                state: FSMContext = data['state']
                await state.set_state(RegistrationState.full_name)
                await event.answer("üëã –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é")
                return  # Stop further processing

            # If user is found but blocked ‚Äî stop interaction
            if user.is_blocked:
                await event.answer("üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
                return

        return await handler(event, data)
