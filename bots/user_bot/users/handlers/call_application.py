from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bots.common.texts import Texts
from bots.user_bot.users.keyboards.call_application import call_application_navigation_buttons, call_request_navigation_buttons, end_chat_navigation_buttons
from bots.user_bot.users.keyboards.main_menu import main_menu_keyboard
from bots.user_bot.states import ContactCallState, ChatSupportState
from core.config import ADMIN_GROUP_ID, COMPLAINT_GROUP_ID
from core.utils import make_callback_application
from db.crud.user_crud import get_user_by_id

router = Router()

@router.message(F.text.lower().contains("—Å–≤—è–∑–∞—Ç—å—Å—è"))
async def contact_start(message: Message):
    await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=call_application_navigation_buttons())

# ----- CALL REQUEST -----
@router.callback_query(F.data == "contact_call")
async def ask_confirm_number(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # Assume phone is stored or hardcoded (later we fetch from DB)
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await state.set_state(ContactCallState.confirm)
    await callback.message.answer(f"–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user.phone_number}?\n–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç, –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å:", reply_markup=call_request_navigation_buttons())


@router.callback_query(F.data == "call_confirm")
async def confirm_call(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    data = {'user': user}
    await callback.bot.send_message(COMPLAINT_GROUP_ID, make_callback_application(data), parse_mode="HTML")
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

